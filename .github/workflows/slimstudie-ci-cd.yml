name: CI/CD pipeline for SlimStudie

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  # Job 1: Local Build
  build:
    name: Build SlimStudie Project
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x
        
    - name: Cache NuGet Packages
      uses: actions/cache@v3
      with:
        path: ~/.nuget/packages 
        key: nuget-${{ runner.os }}-${{ hashFiles('**/packages.lock.json') }}
        restore-keys: |
          nuget-${{ runner.os }}-

    - name: Restore Dependencies
      run: dotnet restore

    - name: Build Project
      run: dotnet build --no-restore --configuration Release

  # Job 2: Unit Tests
  unit-tests:
    name: Run Unit Tests
    runs-on: ubuntu-latest
    needs: build  # Ensures this job runs only after the build job
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x
        
    - name: Install Dependencies
      run: dotnet restore

    - name: Run Unit Tests
      run: |
        dotnet test --no-build --verbosity normal || echo "No tests found, skipping."

  # Job 3: Docker Deployment
  docker-deploy:
    name: Build & Deploy with Docker
    runs-on: ubuntu-latest
    needs: unit-tests  # Runs after unit tests pass
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set Docker Environment Variable
        run: echo "DOCKER_ENV=true" >> $GITHUB_ENV  # Set environment variable for Docker

      - name: Log in to DockerHub
        run: echo "${{ secrets.DOCKER_HUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin

      - name: Build User Service Docker Image
        run: |
          docker build -t my-user-service:latest -f UserService/Dockerfile UserService/
          docker tag my-user-service:latest ${{ secrets.DOCKER_HUB_USERNAME }}/my-user-service:latest

      - name: Build Content Service Docker Image
        run: |
          docker build -t my-content-service:latest -f ContentService/Dockerfile ContentService/
          docker tag my-content-service:latest ${{ secrets.DOCKER_HUB_USERNAME }}/my-content-service:latest
      
      - name: Build API Gateway Docker Image
        run: |
          docker build -t my-api-gateway:latest -f ApiGateway/Dockerfile ApiGateway/
          docker tag my-api-gateway:latest ${{ secrets.DOCKER_HUB_USERNAME }}/my-api-gateway:latest
      
      - name: Push Docker Images
        run: |
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/my-user-service:latest
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/my-content-service:latest
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/my-api-gateway:latest

      - name: Deploy with Docker Compose
        env:
          DOCKER_COSMOSDB_CONNECTION_STRING: ${{ secrets.DOCKER_COSMOSDB_CONNECTION_STRING }}
          DOCKER_COSMOSDB_DATABASE_NAME: ${{ secrets.DOCKER_COSMOSDB_DATABASE_NAME }}
          DOCKER_COSMOSDB_CONTAINER_NAME: ${{ secrets.DOCKER_COSMOSDB_CONTAINER_NAME }}
          DOCKER_RABBITMQ_HOST: ${{ secrets.DOCKER_RABBITMQ_HOST }}
          DOCKER_RABBITMQ_USER: ${{ secrets.DOCKER_RABBITMQ_USER }}
          DOCKER_RABBITMQ_PASSWORD: ${{ secrets.DOCKER_RABBITMQ_PASSWORD }}
        run: |
          docker-compose -f docker-compose.yml up -d --build
